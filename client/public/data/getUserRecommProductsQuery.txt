async function getUserRecommProductsQuery(db, userId) {
  const userActionProducts = await db
    .collection("ratings")
    .aggregate([
      {
        $facet: {
          productsWithHighRatings: [
            { $match: { $and: [{ value: { $gt: 4 } }, { userId }] } },
            { $group: { _id: "$productId" } },
          ],
          productsPurchasedByUser: [
            { $match: { userId } },
            { $group: { _id: "$productId" } },
          ],
        },
      },
      {
        $project: {
          products: {
            $concatArrays: [
              "$productsWithHighRatings",
              "$productsPurchasedByUser",
            ],
          },
        },
      },
      { $unwind: "$products" },
      { $project: { _id: 0, id: "$products._id" } },
      { $limit: 5 },
    ])
    .toArray();
  const productIds = userActionProducts.map(({ id }) => id);
  return await db
    .collection("orders")
    .aggregate([
      { $match: { productId: { $in: productIds } } },
      { $group: { _id: "$itemId", productCount: { $sum: 1 } } },
      {
        $lookup: {
          from: "orders",
          localField: "_id",
          foreignField: "itemId",
          as: "orders",
        },
      },
      { $unwind: "$orders" },
      { $match: { "orders.productId": { $nin: productIds } } },
      { $group: { _id: "$orders.productId", count: { $sum: 1 } } },
      { $sort: { count: -1 } },
      { $limit: 5 },
      {
        $lookup: {
          from: "products",
          localField: "_id",
          foreignField: "id",
          as: "details",
        },
      },
      { $unwind: "$details" },
      {
        $project: {
          _id: 0,
          id: "$details.id",
          name: "$details.name",
          image: "$details.image",
          count: 1,
        },
      },
    ])
    .toArray();
}
